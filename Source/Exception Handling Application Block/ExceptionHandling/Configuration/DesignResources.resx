<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddExceptionHandlingSettingsCommandTitle" xml:space="preserve">
    <value>Add Exception Handling Settings</value>
  </data>
  <data name="CustomHandlerDataAddCommand" xml:space="preserve">
    <value>Custom Handler (using type picker)</value>
  </data>
  <data name="CustomHandlerDataDescription" xml:space="preserve">
    <value>An Exception Handler implemented as a custom class added to Enterprise Library.</value>
  </data>
  <data name="CustomHandlerDataDisplayName" xml:space="preserve">
    <value>Custom Exception Handler</value>
  </data>
  <data name="CustomHandlerDataNameDescription" xml:space="preserve">
    <value>The name of the Custom Exception Handler.</value>
  </data>
  <data name="CustomHandlerDataNameDisplayName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="CustomHandlerDataTypeNameDescription" xml:space="preserve">
    <value>The fully qualified type name of the Custom Exception Handler.</value>
  </data>
  <data name="CustomHandlerDataTypeNameDisplayName" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="ExceptionHandlerDataDescription" xml:space="preserve">
    <value>Handles an exception passed to the block and performs an action on it, such as wrapping or logging it, 
and then passes it on to the next exception handler or returns it to the caller.</value>
  </data>
  <data name="ExceptionHandlerDataDisplayName" xml:space="preserve">
    <value>Exception Handler</value>
  </data>
  <data name="ExceptionHandlerDataNameDescription" xml:space="preserve">
    <value>The name of the Exception Handler.</value>
  </data>
  <data name="ExceptionHandlerDataNameDisplayName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="ExceptionHandlerDataTypeNameDescription" xml:space="preserve">
    <value>The fully qualified type name of the Exception Handler.</value>
  </data>
  <data name="ExceptionHandlerDataTypeNameDisplayName" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="ExceptionHandlingSettingsDescription" xml:space="preserve">
    <value>Configuration settings for the Exception Handling Application Block.</value>
  </data>
  <data name="ExceptionHandlingSettingsDisplayName" xml:space="preserve">
    <value>Exception Handling Settings</value>
  </data>
  <data name="ExceptionHandlingSettingsExceptionPoliciesDescription" xml:space="preserve">
    <value>Configuration settings for all Exception Handling Policies.</value>
  </data>
  <data name="ExceptionHandlingSettingsExceptionPoliciesDisplayName" xml:space="preserve">
    <value>Policies</value>
  </data>
  <data name="ExceptionPolicyDataDescription" xml:space="preserve">
    <value>A policy defines the exceptions it will handle, and the set of Exception Handlers that it will execute when 
one of the specified exceptions is passed to the block.</value>
  </data>
  <data name="ExceptionPolicyDataDisplayName" xml:space="preserve">
    <value>Policy</value>
  </data>
  <data name="ExceptionPolicyDataExceptionTypesDescription" xml:space="preserve">
    <value>The Exception types configured for the Exception Handling Block.</value>
  </data>
  <data name="ExceptionPolicyDataExceptionTypesDisplayName" xml:space="preserve">
    <value>Exception Types</value>
  </data>
  <data name="ExceptionPolicyDataNameDescription" xml:space="preserve">
    <value>The name of the Exception Handling Policy.</value>
  </data>
  <data name="ExceptionPolicyDataNameDisplayName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="ExceptionTypeDataDescription" xml:space="preserve">
    <value>Each Exception Type configured for a policy can specify a series of Exception Handlers that will 
execute when an exception of the specified type is sent to the block for handling by this policy.</value>
  </data>
  <data name="ExceptionTypeDataDisplayName" xml:space="preserve">
    <value>Exception Type</value>
  </data>
  <data name="ExceptionTypeDataExceptionHandlersDescription" xml:space="preserve">
    <value>The Exception Handlers configured for this Exception type.</value>
  </data>
  <data name="ExceptionTypeDataExceptionHandlersDisplayName" xml:space="preserve">
    <value>Handlers</value>
  </data>
  <data name="ExceptionTypeDataNameDescription" xml:space="preserve">
    <value>The name of the Exception.</value>
  </data>
  <data name="ExceptionTypeDataNameDisplayName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="ExceptionTypeDataPostHandlingActionDescription" xml:space="preserve">
    <value>The action the Exception Handling Block will take after executing all of the handlers for this Exception type.  
None means that the block will return false to the application allowing it to resume execution. 
NotifyRethrow means that the block will return true to the application, which should re-throw the original exception.
ThrowNewException means that the block will throw the exception that exists after the final handler runs. 
However, if you use the overload of the HandleException method that takes an out parameter that returns the final exception from the handlers, 
it does not automatically throw the exception, and you must do this in your code.</value>
  </data>
  <data name="ExceptionTypeDataPostHandlingActionDisplayName" xml:space="preserve">
    <value>Post handling action</value>
  </data>
  <data name="ExceptionTypeDataTypeNameDescription" xml:space="preserve">
    <value>The fully qualified type name of the Exception.</value>
  </data>
  <data name="ExceptionTypeDataTypeNameDisplayName" xml:space="preserve">
    <value>Type name</value>
  </data>
  <data name="ReplaceHandlerDataDescription" xml:space="preserve">
    <value>Replaces the exception sent to the block with another exception type. 
The message can be specified for the replacement exception type.</value>
  </data>
  <data name="ReplaceHandlerDataDisplayName" xml:space="preserve">
    <value>Replace Handler</value>
  </data>
  <data name="ReplaceHandlerDataExceptionMessageDescription" xml:space="preserve">
    <value>The message for the replacement exception.</value>
  </data>
  <data name="ReplaceHandlerDataExceptionMessageDisplayName" xml:space="preserve">
    <value>Exception Message</value>
  </data>
  <data name="ReplaceHandlerDataExceptionMessageResourceNameDescription" xml:space="preserve">
    <value>The key in an external resource file for the localized string to use as the message for the replacement exception. </value>
  </data>
  <data name="ReplaceHandlerDataExceptionMessageResourceNameDisplayName" xml:space="preserve">
    <value>Message Resource Name</value>
  </data>
  <data name="ReplaceHandlerDataExceptionMessageResourceTypeDescription" xml:space="preserve">
    <value>The type of the external resource file containing the localized string to use as the message for the replacement exception. </value>
  </data>
  <data name="ReplaceHandlerDataExceptionMessageResourceTypeDisplayName" xml:space="preserve">
    <value>Message Resource Type</value>
  </data>
  <data name="ReplaceHandlerDataNameDescription" xml:space="preserve">
    <value>The name of the Replace Exception Handler.</value>
  </data>
  <data name="ReplaceHandlerDataNameDisplayName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="ReplaceHandlerDataReplaceExceptionTypeNameDescription" xml:space="preserve">
    <value>The fully qualified type name of the replacement exception.</value>
  </data>
  <data name="ReplaceHandlerDataReplaceExceptionTypeNameDisplayName" xml:space="preserve">
    <value>Replace Exception Type </value>
  </data>
  <data name="ReplaceHandlerDataTypeNameDescription" xml:space="preserve">
    <value>The fully qualified type name of the Replace Exception Handler.</value>
  </data>
  <data name="ReplaceHandlerDataTypeNameDisplayName" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="WrapHandlerDataDescription" xml:space="preserve">
    <value>Wraps the exception sent to the block as the inner exception of a new exception type. 
The message can be specified for the wrapping exception type.</value>
  </data>
  <data name="WrapHandlerDataDisplayName" xml:space="preserve">
    <value>Wrap Handler</value>
  </data>
  <data name="WrapHandlerDataExceptionMessageDescription" xml:space="preserve">
    <value>The message for the wrapping exception.</value>
  </data>
  <data name="WrapHandlerDataExceptionMessageDisplayName" xml:space="preserve">
    <value>Exception Message</value>
  </data>
  <data name="WrapHandlerDataExceptionMessageResourceNameDescription" xml:space="preserve">
    <value>The key in an external resource file for the localized string to use as the message for the wrapping exception. </value>
  </data>
  <data name="WrapHandlerDataExceptionMessageResourceNameDisplayName" xml:space="preserve">
    <value>Message Resource Name</value>
  </data>
  <data name="WrapHandlerDataExceptionMessageResourceTypeDescription" xml:space="preserve">
    <value>The type of the external resource file containing the localized string to use as the message for the wrapping exception. </value>
  </data>
  <data name="WrapHandlerDataExceptionMessageResourceTypeDisplayName" xml:space="preserve">
    <value>Message Resource Type</value>
  </data>
  <data name="WrapHandlerDataNameDescription" xml:space="preserve">
    <value>The name of the Wrap Exception Handler.</value>
  </data>
  <data name="WrapHandlerDataNameDisplayName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="WrapHandlerDataTypeNameDescription" xml:space="preserve">
    <value>The fully qualified type name of the Wrap Exception Handler.</value>
  </data>
  <data name="WrapHandlerDataTypeNameDisplayName" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="WrapHandlerDataWrapExceptionTypeNameDescription" xml:space="preserve">
    <value>The fully qualified type name of the wrapping exception.</value>
  </data>
  <data name="WrapHandlerDataWrapExceptionTypeNameDisplayName" xml:space="preserve">
    <value>Wrap Exception Type</value>
  </data>
</root>