<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PermissionDenied" xml:space="preserve">
    <value>Permission Denied</value>
  </data>
  <data name="UnableToHandleException" xml:space="preserve">
    <value>Unable to handle exception: '{0}'.</value>
  </data>
  <data name="ExceptionWasCaught" xml:space="preserve">
    <value>An exception of type '{0}' occurred and was caught.</value>
  </data>
  <data name="StackTraceUnavailable" xml:space="preserve">
    <value>The stack trace is unavailable.</value>
  </data>
  <data name="UndefinedValue" xml:space="preserve">
    <value>&lt;undefined value&gt;</value>
  </data>
  <data name="AdditionalInfo" xml:space="preserve">
    <value>Additional Info:</value>
  </data>
  <data name="OffendingException" xml:space="preserve">
    <value>OFFENDING EXCEPTION:</value>
  </data>
  <data name="OriginalException" xml:space="preserve">
    <value>ORIGINAL EXCEPTION:</value>
  </data>
  <data name="ChainException" xml:space="preserve">
    <value>HANDLING CHAIN EXCEPTION:</value>
  </data>
  <data name="PolicyName" xml:space="preserve">
    <value>POLICY NAME: {0}</value>
  </data>
  <data name="Message" xml:space="preserve">
    <value>Message : {0}</value>
  </data>
  <data name="Source" xml:space="preserve">
    <value>Source : {0}</value>
  </data>
  <data name="StackTrace" xml:space="preserve">
    <value>Stack Trace</value>
  </data>
  <data name="HelpLink" xml:space="preserve">
    <value>Help link : {0}</value>
  </data>
  <data name="TypeString" xml:space="preserve">
    <value>Type : {0}</value>
  </data>
  <data name="InnerException" xml:space="preserve">
    <value>Inner Exception</value>
  </data>
  <data name="ExceptionNullException" xml:space="preserve">
    <value>Unable to rethrow exception: The exception to throw is null.</value>
  </data>
  <data name="ExceptionTypeNotException" xml:space="preserve">
    <value>The type must be of type Exception.</value>
  </data>
  <data name="ExceptionStringNullOrEmpty" xml:space="preserve">
    <value>The value can not be an empty string or null.</value>
  </data>
  <data name="ConfigurationFailureCreatingPolicy" xml:space="preserve">
    <value>A configuration failure occurred while creating policy ‘{0}’.</value>
  </data>
  <data name="BlockName" xml:space="preserve">
    <value>Enterprise Library Exception Handling Application Block</value>
  </data>
  <data name="ErrorHandlingExceptionMessage" xml:space="preserve">
    <value>The error occurred while handling an exception for policy "{0}".</value>
  </data>
  <data name="FieldAccessFailed" xml:space="preserve">
    <value>Access failed</value>
  </data>
  <data name="PropertyAccessFailed" xml:space="preserve">
    <value>Access failed</value>
  </data>
  <data name="ExceptionPolicyNotFound" xml:space="preserve">
    <value>The policy with name '{0}' cannot be found. Exception handling aborted.</value>
  </data>
  <data name="SectionDisplayName" xml:space="preserve">
    <value>Exception Handling Settings</value>
  </data>
  <data name="AddExceptionTypeDisplayName" xml:space="preserve">
    <value>Exception Type</value>
  </data>
  <data name="AddExceptionTypeHelpText" xml:space="preserve">
    <value>Add a new exception type that is handled by this exception policy.</value>
  </data>
  <data name="ExceptionHandlersDisplayName" xml:space="preserve">
    <value>Handlers</value>
  </data>
  <data name="ExceptionPoliciesDisplayName" xml:space="preserve">
    <value>Policies</value>
  </data>
  <data name="ExceptionTypesDisplayName" xml:space="preserve">
    <value>Exception Types</value>
  </data>
  <data name="AddPolicyDisplayDescription" xml:space="preserve">
    <value>Add a new policy.</value>
  </data>
  <data name="AddPolicyDisplayName" xml:space="preserve">
    <value>Policy</value>
  </data>
  <data name="AddReplaceHandlerData" xml:space="preserve">
    <value>Replace Handler</value>
  </data>
  <data name="AddReplaceHandlerDataDescription" xml:space="preserve">
    <value>Replace the exception with another exception.</value>
  </data>
  <data name="AddWrapHandlerData" xml:space="preserve">
    <value>Wrap Handler</value>
  </data>
  <data name="AddWrapHandlerDataDescription" xml:space="preserve">
    <value>Wrap the exception within another exception.</value>
  </data>
  <data name="AddCustomHandlerData" xml:space="preserve">
    <value>Custom</value>
  </data>
  <data name="AuthorizationProviderTypeDescription" xml:space="preserve">
    <value>AuthorizationProviderTypeDescription</value>
  </data>
  <data name="AttributesDescription" xml:space="preserve">
    <value>Attributes</value>
  </data>
  <data name="AttributesDisplayName" xml:space="preserve">
    <value>Attributes</value>
  </data>
  <data name="EventIdDisplayName" xml:space="preserve">
    <value>Event id</value>
  </data>
  <data name="ExceptionHandlerTypeDescription" xml:space="preserve">
    <value>Custom Handler Type</value>
  </data>
  <data name="ExceptionHandlerTypeDisplayName" xml:space="preserve">
    <value>Custom Handler Type</value>
  </data>
  <data name="ExceptionMessageDisplayName" xml:space="preserve">
    <value>Exception message</value>
  </data>
  <data name="ExceptionMessageResourceNameDisplayName" xml:space="preserve">
    <value>Exception message resource name</value>
  </data>
  <data name="ExceptionMessageResourceTypeDisplayName" xml:space="preserve">
    <value>Exception message resource type</value>
  </data>
  <data name="FormatterTypeNameDisplayName" xml:space="preserve">
    <value>Formatter type name</value>
  </data>
  <data name="LogCategoryDisplayName" xml:space="preserve">
    <value>Log category</value>
  </data>
  <data name="NameDisplayName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="PostHandlingActionDisplayName" xml:space="preserve">
    <value>Post handling action</value>
  </data>
  <data name="PriorityDisplayName" xml:space="preserve">
    <value>Priority</value>
  </data>
  <data name="ReplaceExceptionTypeNameDisplayName" xml:space="preserve">
    <value>Replace exception type </value>
  </data>
  <data name="SeverityDisplayName" xml:space="preserve">
    <value>Severity</value>
  </data>
  <data name="TitleDisplayName" xml:space="preserve">
    <value>Title</value>
  </data>
  <data name="TypeNameDisplayName" xml:space="preserve">
    <value>Type name</value>
  </data>
  <data name="UseDefaultLoggerDisplayName" xml:space="preserve">
    <value>Use default logger</value>
  </data>
  <data name="WrapExceptionTypeNameDisplayName" xml:space="preserve">
    <value>Wrap exception type</value>
  </data>
  <data name="CantSwallowNonVoidReturnMessage" xml:space="preserve">
    <value>Cannot swallow exceptions for methods with non-null return type.</value>
  </data>
  <data name="CustomHandlerInvalidTypeException" xml:space="preserve">
    <value>The type '{3}' for custom exception handler with name '{2}' is not a valid type ({0} line {1}).</value>
  </data>
  <data name="CustomHandlerMissingConstructorException" xml:space="preserve">
    <value>The type '{3}' for custom exception handler with name '{2}' does not have the expected constructor ({0} line {1}).</value>
  </data>
  <data name="CustomHandlerNotHandlerTypeException" xml:space="preserve">
    <value>The type '{3}' for custom exception handler with name '{2}' is not a valid handler type ({0} line {1}).</value>
  </data>
  <data name="CustomHandlerNoTypeException" xml:space="preserve">
    <value>The custom exception handler with name '{2}' does not have a type specified ({0} line {1}).</value>
  </data>
  <data name="ExceptionPolicyNotFoundInConfigurationException" xml:space="preserve">
    <value>The exception handling configuration does not contain a policy with name '{0}'.</value>
  </data>
  <data name="MustBeImplementedBySubclassException" xml:space="preserve">
    <value>Must be implemented by subclasses</value>
  </data>
  <data name="ExceptionManagerNotSet" xml:space="preserve">
    <value>Must set an ExceptionManager in the ExceptionPolicy class using the SetExceptionManager method.</value>
  </data>
  <data name="ExceptionManagerAlreadySet" xml:space="preserve">
    <value>The ExceptionManager for the ExceptionPolicy is already set.</value>
  </data>
  <data name="ExceptionExceptionHandlingSectionNotFound" xml:space="preserve">
    <value>The configuration section for Exception Handling cannot be found in the configuration source.</value>
  </data>
  <data name="ExceptionPolicyNameInvalid" xml:space="preserve">
    <value>Cannot retrieve policy information</value>
  </data>
  <data name="ExceptionCannotRetrieveConfiguration" xml:space="preserve">
    <value>Cannot load the exception handling section from the configuration file.</value>
  </data>
  <data name="ThreadPrincipalsEmpty" xml:space="preserve">
    <value>Thread Principal Is Empty</value>
  </data>
</root>