<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddDataSettings" xml:space="preserve">
    <value>Add Data Settings</value>
  </data>
  <data name="CategoryName" xml:space="preserve">
    <value>(name)</value>
  </data>
  <data name="ConnectionStringSettingsCollectionMetadataDescription" xml:space="preserve">
    <value>Database Instances</value>
  </data>
  <data name="ConnectionStringSettingsCollectionMetadataDisplayName" xml:space="preserve">
    <value>Database Instances</value>
  </data>
  <data name="ConnectionStringSettingsMetadataConnectionStringDescription" xml:space="preserve">
    <value>Connection String</value>
  </data>
  <data name="ConnectionStringSettingsMetadataConnectionStringDisplayName" xml:space="preserve">
    <value>Connection String</value>
  </data>
  <data name="ConnectionStringSettingsMetadataDescription" xml:space="preserve">
    <value>A connection string is used to establish the initial connection to a database instance. 
The exact contents of the connection string depend on the specific data source for this connection.</value>
  </data>
  <data name="ConnectionStringSettingsMetadataDisplayName" xml:space="preserve">
    <value>Database Connection String</value>
  </data>
  <data name="ConnectionStringSettingsMetadataNameDescription" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="ConnectionStringSettingsMetadataNameDisplayName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="ConnectionStringSettingsMetadataProviderNameDescription" xml:space="preserve">
    <value>Database Provider</value>
  </data>
  <data name="ConnectionStringSettingsMetadataProviderNameDisplayName" xml:space="preserve">
    <value>Database Provider</value>
  </data>
  <data name="ConnectionStringsSectionMetadataDescription" xml:space="preserve">
    <value>Database Settings</value>
  </data>
  <data name="ConnectionStringsSectionMetadataDisplayName" xml:space="preserve">
    <value>Database Settings</value>
  </data>
  <data name="DatabaseSettingsDefaultDatabaseDescription" xml:space="preserve">
    <value>The default Database instance to use when code does not specify a named Database instance.</value>
  </data>
  <data name="DatabaseSettingsDefaultDatabaseDisplayName" xml:space="preserve">
    <value>Default Database Instance</value>
  </data>
  <data name="DatabaseSettingsDescription" xml:space="preserve">
    <value>Configuration settings for the Data Access Application Block.</value>
  </data>
  <data name="DatabaseSettingsDisplayName" xml:space="preserve">
    <value>Data Settings</value>
  </data>
  <data name="DatabaseSettingsProviderMappingsDescription" xml:space="preserve">
    <value>Providers that allow the Data Access Application Block to use any database for which a suitable Enterprise Library provider is available.</value>
  </data>
  <data name="DatabaseSettingsProviderMappingsDisplayName" xml:space="preserve">
    <value>Custom Databases</value>
  </data>
  <data name="DbProviderMappingDatabaseTypeNameDescription" xml:space="preserve">
    <value>The fully qualified type name of the class that maps the ADO.NET provider for this database type to Enterprise Library.</value>
  </data>
  <data name="DbProviderMappingDatabaseTypeNameDisplayName" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="DbProviderMappingDescription" xml:space="preserve">
    <value>A custom class that maps the ADO.NET provider for the database type specified as the provider in the connection string of a Database Instance to Enterprise Library.</value>
  </data>
  <data name="DbProviderMappingDisplayName" xml:space="preserve">
    <value>Custom Database Provider</value>
  </data>
  <data name="DbProviderMappingNameDescription" xml:space="preserve">
    <value>The name of the Custom Database Provider.</value>
  </data>
  <data name="DbProviderMappingNameDisplayName" xml:space="preserve">
    <value>Name</value>
  </data>
</root>