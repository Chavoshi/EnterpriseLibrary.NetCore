<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddCryptographySettings" xml:space="preserve">
    <value>Add Cryptography Settings</value>
  </data>
  <data name="CryptographySettingsDefaultHashProviderNameDescription" xml:space="preserve">
    <value>The name of the Hash Provider to use when code does specify the name of a configured Hash Provider.</value>
  </data>
  <data name="CryptographySettingsDefaultHashProviderNameDisplayName" xml:space="preserve">
    <value>Default Hash Provider</value>
  </data>
  <data name="CryptographySettingsDefaultSymmetricCryptoProviderNameDescription" xml:space="preserve">
    <value>The name of the Symmetric Cryptography Provider to use when code does specify 
the name of a configured Symmetric Cryptography Provider.</value>
  </data>
  <data name="CryptographySettingsDefaultSymmetricCryptoProviderNameDisplayName" xml:space="preserve">
    <value>Default Symmetric Crypto Provider</value>
  </data>
  <data name="CryptographySettingsDescription" xml:space="preserve">
    <value>Configuration settings for the Cryptography Application Block.</value>
  </data>
  <data name="CryptographySettingsDisplayName" xml:space="preserve">
    <value>Cryptography Settings</value>
  </data>
  <data name="CryptographySettingsHashProvidersDescription" xml:space="preserve">
    <value>The list of configured Hash Providers for the Cryptography Application Block.</value>
  </data>
  <data name="CryptographySettingsHashProvidersDisplayName" xml:space="preserve">
    <value>Hash Providers</value>
  </data>
  <data name="CryptographySettingsSymmetricCryptoProvidersDescription" xml:space="preserve">
    <value>The list of configured Symmetric Cryptography Providers for the Cryptography Application Block.</value>
  </data>
  <data name="CryptographySettingsSymmetricCryptoProvidersDisplayName" xml:space="preserve">
    <value>Symmetric Cryptography Providers</value>
  </data>
  <data name="CustomHashProviderDataAddCommand" xml:space="preserve">
    <value>Custom Hash Provider (using type picker)</value>
  </data>
  <data name="CustomHashProviderDataDescription" xml:space="preserve">
    <value>A Hash Provider implemented as a custom class, and added to Enterprise Library.</value>
  </data>
  <data name="CustomHashProviderDataDisplayName" xml:space="preserve">
    <value>Custom Hash Provider</value>
  </data>
  <data name="CustomHashProviderDataNameDescription" xml:space="preserve">
    <value>The name of the Custom Hash Provider.</value>
  </data>
  <data name="CustomHashProviderDataNameDisplayName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="CustomHashProviderDataTypeNameDescription" xml:space="preserve">
    <value>The fully qualified type name of the Custom Hash Provider.</value>
  </data>
  <data name="CustomHashProviderDataTypeNameDisplayName" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="CustomSymmetricCryptoProviderDataAddCommand" xml:space="preserve">
    <value>Custom Symmetric Crypto Provider (using type picker)</value>
  </data>
  <data name="CustomSymmetricCryptoProviderDataAlgorithmTypeNameDescription" xml:space="preserve">
    <value>The fully qualified type name of a class that derives from SymmetricAlgorithm and implements 
the cryptography algorithm for this provider.</value>
  </data>
  <data name="CustomSymmetricCryptoProviderDataAlgorithmTypeNameDisplayName" xml:space="preserve">
    <value>Algorithm Type</value>
  </data>
  <data name="CustomSymmetricCryptoProviderDataDescription" xml:space="preserve">
    <value>A Symmetric Cryptography Provider implemented as a custom class, and added to Enterprise Library.</value>
  </data>
  <data name="CustomSymmetricCryptoProviderDataDisplayName" xml:space="preserve">
    <value>Custom Symmetric Crypto Provider</value>
  </data>
  <data name="CustomSymmetricCryptoProviderDataNameDescription" xml:space="preserve">
    <value>The name of the Custom Symmetric Crypto Provider.</value>
  </data>
  <data name="CustomSymmetricCryptoProviderDataNameDisplayName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="CustomSymmetricCryptoProviderDataProtectedKeyFilenameDescription" xml:space="preserve">
    <value>The absolute path and the file name of the file that contains the encrypted key. 
This value is not required for DPAPI symmetric providers.</value>
  </data>
  <data name="CustomSymmetricCryptoProviderDataProtectedKeyFilenameDisplayName" xml:space="preserve">
    <value>Key File Path and Name</value>
  </data>
  <data name="CustomSymmetricCryptoProviderDataProtectedKeyProtectionScopeDescription" xml:space="preserve">
    <value>Specifies whether the machine store or the user store is used for storing secrets. 
Possible values are CurrentUser and LocalMachine. This value is not required for DPAPI symmetric providers.</value>
  </data>
  <data name="CustomSymmetricCryptoProviderDataProtectedKeyProtectionScopeDisplayName" xml:space="preserve">
    <value>Key Protection Scope</value>
  </data>
  <data name="CustomSymmetricCryptoProviderDataTypeNameDescription" xml:space="preserve">
    <value>The fully qualified type name of the Custom Symmetric Crypto Provider.</value>
  </data>
  <data name="CustomSymmetricCryptoProviderDataTypeNameDisplayName" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="DpapiSymmetricCryptoProviderDataDescription" xml:space="preserve">
    <value>A Symmetric Cryptography Provider that uses Data Protection API to encrypt and decrypt secrets.</value>
  </data>
  <data name="DpapiSymmetricCryptoProviderDataDisplayName" xml:space="preserve">
    <value>DPAPI Symmetric Crypto Provider</value>
  </data>
  <data name="DpapiSymmetricCryptoProviderDataNameDescription" xml:space="preserve">
    <value>The name of the DPAPI Symmetric Crypto Provider.</value>
  </data>
  <data name="DpapiSymmetricCryptoProviderDataNameDisplayName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="DpapiSymmetricCryptoProviderDataScopeDescription" xml:space="preserve">
    <value>The scope for which the key is valid. 
CurrentUser means that the provider will use the current user's profile to generate the key, and only that user can decrypt secrets.
LocalMachine means that any code running on the machine has access to the protected key, and can decrypt any secret encrypted in LocalMachine mode.</value>
  </data>
  <data name="DpapiSymmetricCryptoProviderDataScopeDisplayName" xml:space="preserve">
    <value>Protection Scope</value>
  </data>
  <data name="DpapiSymmetricCryptoProviderDataTypeNameDescription" xml:space="preserve">
    <value>The fully qualified type name of the DPAPI Symmetric Crypto Provider</value>
  </data>
  <data name="DpapiSymmetricCryptoProviderDataTypeNameDisplayName" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="ExportCyrptographyKeyCommandTitle" xml:space="preserve">
    <value>Export Key ...</value>
  </data>
  <data name="HashAlgorithmProviderDataAlgorithmTypeNameDescription" xml:space="preserve">
    <value>The fully qualified type name of a class that derives from HashAlgorithm and implements the hashing algorithm for this provider.</value>
  </data>
  <data name="HashAlgorithmProviderDataAlgorithmTypeNameDisplayName" xml:space="preserve">
    <value>Algorithm Type</value>
  </data>
  <data name="HashAlgorithmProviderDataDescription" xml:space="preserve">
    <value>A hash algorithm provider that uses .NET hash algorithms that do not require a generated key.</value>
  </data>
  <data name="HashAlgorithmProviderDataDisplayName" xml:space="preserve">
    <value>Hash Algorithm Provider</value>
  </data>
  <data name="HashAlgorithmProviderDataNameDescription" xml:space="preserve">
    <value>The name of the Hash Algorithm Provider.</value>
  </data>
  <data name="HashAlgorithmProviderDataNameDisplayName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="HashAlgorithmProviderDataSaltEnabledDescription" xml:space="preserve">
    <value>Determines if a random string (a salt value) is generated and pre-pended to the plaintext before hashing. 
Using salt helps to guard against dictionary attacks, which take longer because every entry in the dictionary 
must be hashed with every possible salt value.</value>
  </data>
  <data name="HashAlgorithmProviderDataSaltEnabledDisplayName" xml:space="preserve">
    <value>Salt Enabled</value>
  </data>
  <data name="HashAlgorithmProviderDataTypeNameDescription" xml:space="preserve">
    <value>The fully qualified type name of the Hash Algorithm Provider.</value>
  </data>
  <data name="HashAlgorithmProviderDataTypeNameDisplayName" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="HashProviderDataDescription" xml:space="preserve">
    <value>A base class for all hash providers.</value>
  </data>
  <data name="HashProviderDataDisplayName" xml:space="preserve">
    <value>Hash Provider</value>
  </data>
  <data name="HashProviderDataNameDescription" xml:space="preserve">
    <value>The name of the Hash Provider.</value>
  </data>
  <data name="HashProviderDataNameDisplayName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="HashProviderDataTypeNameDescription" xml:space="preserve">
    <value>The fully qualified type name of the Hash Provider.</value>
  </data>
  <data name="HashProviderDataTypeNameDisplayName" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="KeyedHashAlgorithmProviderDataAlgorithmTypeNameDescription" xml:space="preserve">
    <value>The fully qualified type name of a class that derives from HashAlgorithm and implements the hashing algorithm for this provider.</value>
  </data>
  <data name="KeyedHashAlgorithmProviderDataAlgorithmTypeNameDisplayName" xml:space="preserve">
    <value>Algorithm Type</value>
  </data>
  <data name="KeyedHashAlgorithmProviderDataDescription" xml:space="preserve">
    <value>A hash algorithm provider that uses .NET hash algorithms that require a generated key.</value>
  </data>
  <data name="KeyedHashAlgorithmProviderDataDisplayName" xml:space="preserve">
    <value>Keyed Hash Algorithm Provider</value>
  </data>
  <data name="KeyedHashAlgorithmProviderDataNameDescription" xml:space="preserve">
    <value>The name of the Keyed Hash Algorithm Provider.</value>
  </data>
  <data name="KeyedHashAlgorithmProviderDataNameDisplayName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="KeyedHashAlgorithmProviderDataProtectedKeyFilenameDescription" xml:space="preserve">
    <value>The absolute path and the file name of the file that contains the encrypted key. 
This value is required for keyed hash algorithms.</value>
  </data>
  <data name="KeyedHashAlgorithmProviderDataProtectedKeyFilenameDisplayName" xml:space="preserve">
    <value>Key File Path and Name</value>
  </data>
  <data name="KeyedHashAlgorithmProviderDataProtectedKeyProtectionScopeDescription" xml:space="preserve">
    <value>Specifies whether the machine store or the user store is used for storing secrets. 
Possible values are CurrentUser and LocalMachine. This value is required for keyed hash algorithms.</value>
  </data>
  <data name="KeyedHashAlgorithmProviderDataProtectedKeyProtectionScopeDisplayName" xml:space="preserve">
    <value>Key Protection Scope</value>
  </data>
  <data name="KeyedHashAlgorithmProviderDataSaltEnabledDescription" xml:space="preserve">
    <value>Determines if a random string (a salt value) is generated and pre-pended to the plaintext before hashing. 
Using salt helps to guard against dictionary attacks, which take longer because every entry in the dictionary 
must be hashed with every possible salt value.</value>
  </data>
  <data name="KeyedHashAlgorithmProviderDataSaltEnabledDisplayName" xml:space="preserve">
    <value>Salt Enabled</value>
  </data>
  <data name="KeyedHashAlgorithmProviderDataTypeNameDescription" xml:space="preserve">
    <value>The fully qualified type name of the Keyed Hash Algorithm Provider.</value>
  </data>
  <data name="KeyedHashAlgorithmProviderDataTypeNameDisplayName" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="SymmetricAlgorithmProviderDataAlgorithmTypeNameDescription" xml:space="preserve">
    <value>The fully qualified type name of a class that derives from SymmetricAlgorithm and implements the cryptography algorithm for this provider.</value>
  </data>
  <data name="SymmetricAlgorithmProviderDataAlgorithmTypeNameDisplayName" xml:space="preserve">
    <value>Algorithm Type</value>
  </data>
  <data name="SymmetricAlgorithmProviderDataDescription" xml:space="preserve">
    <value>A symmetric cryptography algorithm provider that uses .NET symmetric algorithms.</value>
  </data>
  <data name="SymmetricAlgorithmProviderDataDisplayName" xml:space="preserve">
    <value>Symmetric Algorithm Provider</value>
  </data>
  <data name="SymmetricAlgorithmProviderDataNameDescription" xml:space="preserve">
    <value>The name of the Symmetric Algorithm Provider.</value>
  </data>
  <data name="SymmetricAlgorithmProviderDataNameDisplayName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="SymmetricAlgorithmProviderDataProtectedKeyFilenameDescription" xml:space="preserve">
    <value>The absolute path and the file name of the file that contains the encrypted key. 
This value is not required for DPAPI symmetric providers.</value>
  </data>
  <data name="SymmetricAlgorithmProviderDataProtectedKeyFilenameDisplayName" xml:space="preserve">
    <value>Key File Path and Name</value>
  </data>
  <data name="SymmetricAlgorithmProviderDataProtectedKeyProtectionScopeDescription" xml:space="preserve">
    <value>Specifies whether the machine store or the user store is used for storing secrets. 
Possible values are CurrentUser and LocalMachine. 
This value is not required for DPAPI symmetric providers.</value>
  </data>
  <data name="SymmetricAlgorithmProviderDataProtectedKeyProtectionScopeDisplayName" xml:space="preserve">
    <value>Key Protection Scope</value>
  </data>
  <data name="SymmetricAlgorithmProviderDataTypeNameDescription" xml:space="preserve">
    <value>The fully qualified type name of the Symmetric Algorithm Provider.</value>
  </data>
  <data name="SymmetricAlgorithmProviderDataTypeNameDisplayName" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="SymmetricProviderDataDescription" xml:space="preserve">
    <value>A base class for all symmetric cryptography providers.</value>
  </data>
  <data name="SymmetricProviderDataDisplayName" xml:space="preserve">
    <value>Symmetric Provider</value>
  </data>
  <data name="SymmetricProviderDataNameDescription" xml:space="preserve">
    <value>The name of the Symmetric Provider.</value>
  </data>
  <data name="SymmetricProviderDataNameDisplayName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="SymmetricProviderDataTypeNameDescription" xml:space="preserve">
    <value>The fully qualified type name of the Symmetric Provider.</value>
  </data>
  <data name="SymmetricProviderDataTypeNameDisplayName" xml:space="preserve">
    <value>Type</value>
  </data>
</root>