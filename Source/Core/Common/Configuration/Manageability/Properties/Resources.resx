<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ConfigurationElementNotInstrumentationConfigurationSection" xml:space="preserve">
    <value>Expected an instance of InstrumentationConfigurationSection.</value>
  </data>
  <data name="ConfigurationElementOfWrongType" xml:space="preserve">
    <value>Expected and instance of '{0}' but got an instance of '{1}' instead.</value>
  </data>
  <data name="CustomProviderAttributesPartName" xml:space="preserve">
    <value>Attributes</value>
  </data>
  <data name="CustomProviderTypePartName" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="ExceptionAdmBuildingNoCurrentCategory" xml:space="preserve">
    <value>A started category is required to perform the operation.</value>
  </data>
  <data name="ExceptionAdmBuildingNoCurrentPolicy" xml:space="preserve">
    <value>A started policy is required to perform the operation.</value>
  </data>
  <data name="ExceptionAdmBuildingPolicyNotFinished" xml:space="preserve">
    <value>A policy construction is in process.</value>
  </data>
  <data name="ExceptionAdmBuildingProcessNotFinished" xml:space="preserve">
    <value>The built content is requested but there are outstanding categories being built.</value>
  </data>
  <data name="ExceptionAdmDefaultValueAboveMaxValue" xml:space="preserve">
    <value>The default value is above the max value for part '{0}' on policy '{1}': {2} versus {3}.</value>
  </data>
  <data name="ExceptionAdmDefaultValueBelowMinValue" xml:space="preserve">
    <value>The default value is below the min value for part '{0}' on policy '{1}': {2} versus {3}.</value>
  </data>
  <data name="ExceptionAdmDefaultValueLongerThanMaxlen" xml:space="preserve">
    <value>The default value for part '{0}' on policy '{1}' is longer than the max length {2}.</value>
  </data>
  <data name="ExceptionAdmInvalidCharactersInRegistryKey" xml:space="preserve">
    <value>Registry key path contains invalid characters or is missing parts: '{0}'</value>
  </data>
  <data name="ExceptionAdmInvalidDefaultValue" xml:space="preserve">
    <value>The default value is invalid: '{0}'</value>
  </data>
  <data name="ExceptionAdmInvalidMaxlen" xml:space="preserve">
    <value>The max len of {2} is invalid on part '{0}' for policy '{1}'. The allowed values are 0-1024.</value>
  </data>
  <data name="ExceptionAdmInvalidName" xml:space="preserve">
    <value>String '{0}' is not a valid name on an ADM template.</value>
  </data>
  <data name="ExceptionAdmInvalidSuggestion" xml:space="preserve">
    <value>The suggestion is invalid: '{0}'</value>
  </data>
  <data name="ExceptionAdmMinValueLargerThanMaxValue" xml:space="preserve">
    <value>Min value is larger than max value for part '{0}' on policy '{1}': {2} versus {3}.</value>
  </data>
  <data name="ExceptionAdmNumericConstraintOutsideRange" xml:space="preserve">
    <value>The numeric constraint '{2}' for part '{0}' on policy '{1}' is outside the allowed range. The valued values are 0-999999999. </value>
  </data>
  <data name="ExceptionAdmRegistryKeyPathSegmentTooLong" xml:space="preserve">
    <value>Path segment over 255 chars in length for registry key: '{0}'</value>
  </data>
  <data name="ExceptionAdmRegistryValueNameTooLong" xml:space="preserve">
    <value>Registry value name over 255 chars in length: '{0}'</value>
  </data>
  <data name="ExceptionApplicationNameTooLong" xml:space="preserve">
    <value>The application name cannot be longer than 255 characters.</value>
  </data>
  <data name="ExceptionArgumentEmpty" xml:space="preserve">
    <value>The parameter is an empty string</value>
  </data>
  <data name="ExceptionCannotLockGroupPolicy" xml:space="preserve">
    <value>Group policy processing could not be locked prior to reading the registry</value>
  </data>
  <data name="ExceptionConfigurationLoadFileNotFound" xml:space="preserve">
    <value>The configuration file {0} could not be found.</value>
  </data>
  <data name="ExceptionErrorOnCallbackForSectionUpdate" xml:space="preserve">
    <value>Exception caught from callback for change on section '{0}' calling method '{1}'</value>
  </data>
  <data name="ExceptionErrorWhileOverriding" xml:space="preserve">
    <value>An error was detected while a configuration element's properties were being overriden with policy values.</value>
  </data>
  <data name="ExceptionMissingRegistryValue" xml:space="preserve">
    <value>There is no value with name '{1}' on key '{0}'.</value>
  </data>
  <data name="ExceptionRegistryValueNotEnumValue" xml:space="preserve">
    <value>The value for '{1}' on key '{0}' is not a valid value name for enum type '{2}': '{3}'</value>
  </data>
  <data name="ExceptionRegistryValueNotTypeName" xml:space="preserve">
    <value>The value for '{1}' on key '{0}' is not a valid assembly qualified type name: '{2}'</value>
  </data>
  <data name="ExceptionRegistryValueOfWrongType" xml:space="preserve">
    <value>The value for '{1}' on key '{0}' is not of the correct type:
Expected {2} but got {3} instead.</value>
  </data>
  <data name="ExceptionStringNullOrEmpty" xml:space="preserve">
    <value>The value can not be null or string or empty.</value>
  </data>
  <data name="ExceptionUnexpectedErrorProcessingSection" xml:space="preserve">
    <value>Unexpected error while processing section '{0}'</value>
  </data>
  <data name="ExceptionUnexpectedType" xml:space="preserve">
    <value>The expected type '{0}' was not provided.</value>
  </data>
  <data name="GroupPolicyWatcherThread" xml:space="preserve">
    <value>Group policy notification thread</value>
  </data>
  <data name="InstrumentationSectionCategoryName" xml:space="preserve">
    <value>Instrumentation</value>
  </data>
  <data name="InstrumentationSectionEventLoggingEnabledPartName" xml:space="preserve">
    <value>Event logging enabled</value>
  </data>
  <data name="InstrumentationSectionPerformanceCountersEnabledPartName" xml:space="preserve">
    <value>Performance counters enabled</value>
  </data>
  <data name="InstrumentationSectionPolicyName" xml:space="preserve">
    <value>Specify settings for the instrumentation section</value>
  </data>
  <data name="ManageableConfigurationSourceName" xml:space="preserve">
    <value>Manageable Configuration Source</value>
  </data>
  <data name="ManageableConfigurationSourceUpdateNotAvailable" xml:space="preserve">
    <value>Updates to configuration through the ManageableConfigurationSource are not supported. Use the FileConfigurationSource instead.</value>
  </data>
  <data name="NoneListItem" xml:space="preserve">
    <value>None</value>
  </data>
</root>