<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArgumentIsEmptyError" xml:space="preserve">
    <value>Argument is empty</value>
  </data>
  <data name="ArgumentNotGreaterOrEqualTo" xml:space="preserve">
    <value>The size of '{0}' should be greater or equal to '{1}'.</value>
  </data>
  <data name="ExceptionReadEnvironmentVariablesDenied" xml:space="preserve">
    <value>Environment Variables access denied.</value>
  </data>
  <data name="FlushFailedException" xml:space="preserve">
    <value>An error occurred while flushing the event entries.</value>
  </data>
  <data name="InvalidBufferingArguments" xml:space="preserve">
    <value>Invalid arguments combination for buffering interval and count. Please specify valid range values for count and interval parameters.</value>
  </data>
  <data name="InvalidConnectionStringError" xml:space="preserve">
    <value>The value does not represent a connection string</value>
  </data>
  <data name="InvalidDateTimeFormatError" xml:space="preserve">
    <value>The date time format is invalid.</value>
  </data>
  <data name="InvalidNavigationPathInFileNameError" xml:space="preserve">
    <value>A file name with a relative path is not allowed. Provide only the file name or the full path of the file.</value>
  </data>
  <data name="JsonSerializationError" xml:space="preserve">
    <value>Cannot serialize to JSON format the payload: {0}</value>
  </data>
  <data name="TextSerializationError" xml:space="preserve">
    <value>Cannot serialize the payload: {0}</value>
  </data>
  <data name="TimeSpanOutOfRangeError" xml:space="preserve">
    <value>The valid range for '{0}' is from 0 to 24.20:31:23.647</value>
  </data>
  <data name="EventSourceAnalyzerManifestGenerationError" xml:space="preserve">
    <value>EventSource manifest generation failure.
{0}
Manifest:
{1}</value>
  </data>
  <data name="EventSourceAnalyzerMethodCallError" xml:space="preserve">
    <value>A call to method '{0}' threw an exception.</value>
  </data>
  <data name="EventSourceAnalyzerMissingWriteEventCallError" xml:space="preserve">
    <value>Event method '{0}' does not call WriteEvent() or the call is bypassed due to incorrect filtering before the WriteEvent call.</value>
  </data>
  <data name="EventSourceAnalyzerNoEventsError" xml:space="preserve">
    <value>The specified EventSource does not have any method decorated with EventAttribute.</value>
  </data>
  <data name="XmlSerializationError" xml:space="preserve">
    <value>Cannot serialize to XML format the payload: {0}</value>
  </data>
  <data name="MaxBufferSizeShouldBeLargerThanBufferingCount" xml:space="preserve">
    <value>The maxBufferSize argument has to be at least 3 times larger than the bufferingCount argument. Current values are maxBufferSize={0} and bufferingCount={1}.</value>
  </data>
  <data name="EventSourceAnalyzerMismatchParametersType" xml:space="preserve">
    <value>The parameter name '{0}' with type '{1}' does not match the payload type '{2}' in method '{3}'. Check the parameter type in WriteEvent and assign a type that matches the same event arguement type . </value>
  </data>
  <data name="EventSourceAnalyzerMismatchParametersOrder" xml:space="preserve">
    <value>The parameter name '{0}' defined in the event '{1}' does not match the order in WriteEvent function.</value>
  </data>
  <data name="EventSourceAnalyzerDifferentParameterCount" xml:space="preserve">
    <value>The number of WriteEvent arguments and event parameters are different in event name '{0}'.</value>
  </data>
  <data name="EventSourceAnalyzerNullPayloadValue" xml:space="preserve">
    <value>The payload argument in position '{0}' is sending a null value which may not map to the parameter '{1}' in event '{2}'.</value>
  </data>
  <data name="ArgumentNotLowerOrEqualTo" xml:space="preserve">
    <value>The size of '{0}' should be lower or equal to '{1}'.</value>
  </data>
  <data name="InvalidNavigationPathInReplacedFileNameError" xml:space="preserve">
    <value>A file name with a relative path after replacing environment variables is not allowed. Provide only the file name or the full path of the file.</value>
  </data>
  <data name="EventSourceAnalyzerBadFormedManifestError" xml:space="preserve">
    <value>An event type argument could not be properly serialized into an event source manifest. Verify any use of Enums whose base type is other than Int32 or Int64 and replace it with any of these allowed types. For more infromation about issues using Enums read: http://connect.microsoft.com/VisualStudio/feedback/details/785409/eventsource-manifest-generation-creates-wrong-map-values-for-enum-types-other-than-int32-or-int64</value>
  </data>
  <data name="ArgumentMustBeObservableEventListener" xml:space="preserve">
    <value>The argument must be an instance of ObservableEventListener.</value>
  </data>
  <data name="FormatterElementNotResolvedError" xml:space="preserve">
    <value>Could not created the formatter specified in configuration element name '{0}'.</value>
  </data>
  <data name="IncompleteArgumentsError" xml:space="preserve">
    <value>The parameters specified in this element does not map to an existing type member. All paramters are required in the same order of the defined type member. </value>
  </data>
</root>